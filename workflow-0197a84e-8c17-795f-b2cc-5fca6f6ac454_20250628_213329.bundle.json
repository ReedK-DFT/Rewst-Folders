{"version":2,"exportedAt":"2025-06-28T21:33:29.843750+00:00","signing":{"cert":"-----BEGIN CERTIFICATE-----\nMIICazCCAfGgAwIBAgIUFJtHAR8D+ZfChHcAXHemH7s8zRowCgYIKoZIzj0EAwIwfDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkZMMQ4wDAYDVQQHEwVUYW1wYTEOMAwGA1UEChMFUmV3c3QxEzARBgNVBAsTClJld3N0IERldnMxKzApBgNVBAMTImxvY2FsIFJld3N0IEltcG9ydC9FeHBvcnQgQ0EyIHYxLjEwHhcNMjIwNjAzMTkwMDU1WhcNMjUwNTIzMTkwMTI1WjBDMQswCQYDVQQGEwJVUzELMAkGA1UECBMCRkwxDjAMBgNVBAcTBVRhbXBhMRcwFQYDVQQDEw5sb2NhbC5yZXdzdC5pbzB2MBAGByqGSM49AgEGBSuBBAAiA2IABMcTJzyLIvX1+3545EJbFeNVjahxVq6TFQ7n/IYZs4yEMQzDWZjAyHhJPZk3Dxq/wFzesXMYJu41rhxfz7AZh15LtFGfy9V2B4X5KH7sGJWqOan0mabuF83llruTLA/NQaNtMGswDgYDVR0PAQH/BAQDAgeAMB0GA1UdDgQWBBTDePOSC6hckrg6usrK2giZv9GxpjAfBgNVHSMEGDAWgBTojdemsJqfnB19iyMxmIi3OGYw6TAZBgNVHREEEjAQgg5sb2NhbC5yZXdzdC5pbzAKBggqhkjOPQQDAgNoADBlAjEA8NsLnuGhfTPC7dB0ojWf5WmH64qFZuPFD6Q0RwGYO0D1Tn2x5+/37kW3HFcGHV0wAjBM7LSidsc7E9+fmcesnN5hM34eGMP+YWCoEeFIPPANXQKemAgUVf35iXyU64sVEC4=\n-----END CERTIFICATE-----","hash":"sha512","signature":"MGYCMQCF60K/oOq3pDjr5bb64sgXSuhGRiGdvumqxfHt5vuirYonJyIZ1w1z3fOKd+VD8/kCMQCmRGp3EdrZ5/FtDDjD1FbQsxP+xojD0QQ9JQKpDcDX0CAW9FkMP3CvwhW18uzig+U="},"objects":{"workflow_task_id:8Q8aveL1ximsuUbY4H5oU3HydNs75SSy8RAoafDPTjAH":{"type":"workflow_task_id","content_hash":"GNB2g5ht6iUAFy34VLNhFJ92hUy3bAuLvEja4zCaN9f1","hash":"doaCx739kK1oMKxnyBLicY3cn4LBdTNtyTXTtSr7Wtf","fields":{"id":"f70541f215cf4f8a9221a0a03ff6c866"}},"transition_id:2cHmAGJpbkHu8ZPVRSgoQFgodGhRVNgf67G51baCeSEF":{"type":"transition_id","content_hash":"E2Bd2rLiwcBkcn335iGtKj2ZhJdU9rC54wjjUSsJxvyK","hash":"89ePUDwxVrLmF7nXakVwhcKMnQqrxLP7JNWcaZCSkCjm","fields":{"id":"e8f37674-e60b-446b-9bb2-d937595c1f3d"}},"transition_id:6moyvX9DUrDSRaTq36vvEbadMdsVBSfMPkRBjbAcCK5z":{"type":"transition_id","content_hash":"CrNrvSSkt3onvvT2QbZqJxgBbRvGAx9W4jgRbhutn4f4","hash":"BnCw5SZoi1JTZ2syRDPUxgYVbMWXteHQxsLUWgpEZEWe","fields":{"id":"9eb5287c-7d7f-466f-a37c-bf1f07dc947f"}},"transition_id:4c7x3rx2NNW2LNyjBU85CeAxUtyEAsEeBPn4qexnyxi9":{"type":"transition_id","content_hash":"BNZwXKzcGJmCdXwsWBkQR4Z4QCEvSKEYxymjRc6Uzw3L","hash":"DeK1MKCcFskpxJ5KfGQFbTa8iKduo3DvvucURKPQQujC","fields":{"id":"2be3b3d7-d4cc-45db-9153-147ff1332ee5"}},"transition_id:EVfvkNdkzgcfr8uUtd9vUsxmvtr7CBvM2myjZAcnAnTT":{"type":"transition_id","content_hash":"2i6uknjwtjyv7iT2utDEcGxHo9aQUQ6MZq753B7mhPba","hash":"8EBYiHVtM4oAn8NECchqn2ECt4YjNtyVMcMr7HGqMgPX","fields":{"id":"26647aa6-dc5f-4b83-8cf4-b179909742ca"}},"action:7To4L9ezVkoUpG1dBUBMCxwXxCsVnwqjB97gXsJQKuWo":{"type":"action","content_hash":"HSEfWa6r3EymMKgxqapS8QUC5BpJHNUqJqWhJoseRQgm","hash":"8Fa4fauKavebkeFPnqBrXrLf77hQx7Xt8bKw7jFmZzp5","fields":{"ref":"rewst.list_workflows"}},"workflow_task_id:FA4gH6Hg6ogeS2EpV2389ip1BpEJ8wz8HtuCzzk7ZRY9":{"type":"workflow_task_id","content_hash":"Ezf7xhwbJSW7UKZdUJ4M9agXUvtRx4ksVpEcosbE7zXT","hash":"HA4X9xWRFhFMbCGDVHniM8LajSP5FAiSJupe67rtTtc5","fields":{"id":"fef70b4b5e9f47c6bd857bfb6f71a4e8"}},"transition_id:CU1Jw8VBbgHUC5tZoEk1TxawuYCycp4AM1tramz8jeGQ":{"type":"transition_id","content_hash":"12KbA3MxDp2vUY9K6VDdRmiHVa99riayEN8N3S7pCyXN","hash":"ASAePN5dXu5eeAoZTZzbZCbE6yYebNJ9hHVSc9TbiJVm","fields":{"id":"f86d1101-0ea3-4f96-828f-25d6407dae3f"}},"workflow_task_id:7tYJ5xNSyoMeUdkeC9Tnf5jUhoQ5SKtiPEM2LwTgTSH3":{"type":"workflow_task_id","content_hash":"AGtGMsg4mB7HwRhdBwMoWoEWkvYBQgGjSTaTqfnwgnnR","hash":"W3deTWo7V9zRSQTP5kpeD1YtYSRkqYCRhyzgbMuEMfP","fields":{"id":"aa7df6a4a2fa4b7e83950a34c78f297b"}},"workflow_task_id:E49R5z5LXLYTwtwhvUpS3nsKfuRWRLsXV8UThjL8V4Vi":{"type":"workflow_task_id","content_hash":"GfdJ1Mxknuwpzrwzu8fD4jwpheDRs8u3gD6RkzuZXwpH","hash":"9BjGFDv4843TYE7xpR6umk9BHts9cZxNTBrdyW2wVaEY","fields":{"id":"6bc58e3012a4473792f617031200d9e3"}},"workflow_task_id:HrFnBF7N8wAhMie2oTpERDTa7cqLogSuAHAB3XZe7beS":{"type":"workflow_task_id","content_hash":"8dk7jG1RwRYRvTii2Qvddr8Mf3RpCktfnu2MiAWeZrvF","hash":"4bXWk4d47wBrhNK7qggSZhDXegz8V4vwboiMcEHFHntk","fields":{"id":"5517eb1441704e389ea718c58620784a"}},"action:CBSfhCQSGN4Hj8XDK4gZbiguLRU4VbSAMsL5vvGMFGLr":{"type":"action","content_hash":"CdPL6KHuhM7mBvTHi4QnQbxCitnoxuRrq1BfHNnQYzKB","hash":"Arr2RCEM96WqU2EkvigszSfsW9GZHa4HJC5a1fL9qZ5g","fields":{"ref":"core.noop"}},"workflow:GGuB83BfZiVaLr21koPpxezd2uqZHv4QB4FB6n7Jdw42":{"type":"workflow","content_hash":"5QAwPLg83ogDPTMGUHr5cgb747SpkHTsK3HZfoBr2DTS","hash":"B3Y8hnLAfPbBRwfbvPMXDeR2ZuK2Rg5zbcVen8aK1RWk","fields":{"humanSecondsSaved":0,"notes":[],"output":[{"result":"{{ CTX.result_html }}"}],"parameters":{},"tasks":[{"id":"@@@workflow_task_id_ref1@@@","action":{"id":"@@@action_ref1@@@"},"humanSecondsSaved":0,"input":{},"isMocked":false,"join":0,"mockInput":{"mock_result":{}},"name":"BUILD_FOLDER_TREE","next":[{"do":["@@@workflow_task_id_ref2@@@"],"from":null,"id":"@@@transition_id_ref1@@@","publish":[{"key":"root","value":"{# CONTEXT #}\r\n{%- set context = namespace(tag_index = {}, folders = [], result = {'name':'root', 'index':[], 'folders':{}, 'workflows': []} ) -%}\r\n{# {'name': '', 'index': [], 'workflows': {'index': []} #}\r\n{# FUNCTIONS #}\r\n{%- macro title_case(arg_word) -%}\r\n    {%- set arg_word = arg_word | lower -%}\r\n    {%- set arg_word = (arg_word[0] | upper) + (arg_word[1:]) -%}\r\n    {{ arg_word }}\r\n{%- endmacro -%}\r\n{%- macro normalize_name(arg_name) -%}\r\n    {%- set parts = (arg_name | trim).split(' ') -%}\r\n    {%- set titled = [] -%}\r\n    {%- for part in parts -%}\r\n        {%- do titled.append(title_case(part)) -%}\r\n    {%- endfor -%}\r\n    {%- set normalized = titled | join(' ') -%}\r\n    {%- if normalized.startswith('[') and (not ']' in normalized) -%}\r\n        {%- set normalized = (normalized[1] | upper) + (normalized[2:]) -%}\r\n    {%- endif -%}\r\n    {{ normalized }}\r\n{%- endmacro -%}\r\n{%- macro index_equals(source, target) -%}\r\n    {%- set returns = {'result': true} -%}\r\n    {%- for tag in source -%}\r\n        {%- if not tag in target -%}\r\n            {%- do returns.update({'result': false}) -%}\r\n            {%- break -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {%- if returns.result -%}\r\n        {%- for tag in target -%}\r\n            {%- if not tag in source -%}\r\n                {%- do returns.update({'result': false}) -%}\r\n                {%- break -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n    {{ returns.result }}\r\n{%- endmacro -%}\r\n{%- macro folders_contains(folder_list, index) -%}\r\n    {%- set returns = {'result': false} -%}\r\n    {%- for folder in folder_list -%}\r\n        {%- if index_equals(folder.index, index) -%}\r\n            {%- do returns.update({'result': true}) -%}\r\n            {%- break -%}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ returns.result }}\r\n{%- endmacro -%}\r\n{# MAIN #}\r\n{%- for item in CTX.workflows -%}\r\n    {%- set item_name = item.name | trim -%}\r\n    {%- if item_name.startswith('[') -%}\r\n        {%- set new_tag = { 'name': normalize_name(item_name | regex_substring('^\\[(.*?)\\]')) } -%}\r\n        {%- for tag in item.tags -%}\r\n            {%- if normalize_name(tag.name) == new_tag.name -%}\r\n                {%- do new_tag.update({ 'name': '' }) -%}\r\n                {%- break -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n        {%- if not new_tag.name == '' -%}\r\n            {%- do item.tags.append(new_tag) -%}\r\n            {%- if (new_tag.name | lower).startswith('rewst') -%}\r\n                {%- if not {'name': 'Rewst'} in item.tags -%}\r\n                    {%- do item.tags.append({'name': 'Rewst'}) -%}\r\n                {%- endif -%}\r\n            {%- endif -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n    {%- set item_tags = [normalize_name(t.name) for t in item.tags] -%}\r\n    {%- if item_tags | length > 0 -%}\r\n        {%- if not folders_contains(context.folders, item_tags) -%}\r\n            {%- do context.folders.append({'index': item_tags, 'workflows': []}) -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n{%- for folder in context.folders -%}\r\n    {%- do folder.update({'index': folder.index | sort}) -%}\r\n{%- endfor -%}\r\n{%- for item in CTX.workflows -%}\r\n    {%- set item_tags = [normalize_name(t.name) for t in item.tags] -%}\r\n    {%- if item_tags | length == 0 or item_tags[0] == '' -%}\r\n        {%- do context.result.workflows.append(item) -%}\r\n    {%- else -%}\r\n        {%- for folder in context.folders -%}\r\n            {%- if index_equals(folder.index, item_tags) -%}\r\n                {%- set current = {'item': context.result} -%}\r\n                {%- for t in folder.index -%}\r\n                    {%- if not t in current.item.folders -%}\r\n                        {%- do current.item.folders.update({ t:{'folders':{}, 'workflows':[]} }) -%}\r\n                        {%- do current.update({'item': current.item.folders[t]})-%}\r\n                    {%- else -%}\r\n                        {%- do current.update({'item': current.item.folders[t]})-%}\r\n                    {%- endif -%}\r\n                {%- endfor -%}\r\n                {%- do current.item.workflows.append(item) -%}\r\n            {%- endif -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n{{ context.result }}"}],"to":null,"when":"{{ SUCCEEDED }}"}],"packOverrides":[],"publishResultAs":"","retry":null,"runAsOrgId":"","timeout":600,"transitionMode":"FOLLOW_ALL","with":null,"securitySchema":{"redact":{"input":[],"result":[]}}},{"id":"@@@workflow_task_id_ref2@@@","action":{"id":"@@@action_ref1@@@"},"humanSecondsSaved":0,"input":{},"isMocked":false,"join":0,"mockInput":{"mock_result":{}},"name":"BUILD_RESULT_PAGE","next":[{"do":["@@@workflow_task_id_ref3@@@"],"from":null,"id":"@@@transition_id_ref2@@@","publish":[{"key":"result_html","value":"{%- macro insert_folder(obj) -%}\r\n    {%- for folder in [f for f in obj.folders | sort] -%}\r\n        <li>\r\n            <span class=\"toggle\">â–¶</span> {{ folder }}\r\n            <ul>\r\n            {{ insert_folder(obj.folders[folder]) }}\r\n            </ul>\r\n        </li>\r\n    {%- endfor -%}\r\n    {%- for workflow in obj.workflows -%}\r\n        <li><a href={{ \"\\\"\" }}{{'https://app.rewst.io/organizations/' + workflow.org_id + '/workflows/' + workflow.id}}{{ \"\\\"\" }} target=\"_blank\">{{ workflow.name }}</a></li>\r\n    {%- endfor -%}\r\n{%- endmacro -%}\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>REWST Folders!</title>\r\n    <style>\r\n        ul.treeview, ul.treeview ul {\r\n            list-style: none;\r\n            margin: 0;\r\n            padding-left: 1em;\r\n            position: relative;\r\n        }\r\n        ul.treeview ul {\r\n            display: none;\r\n        }\r\n        ul.treeview .toggle {\r\n            cursor: pointer;\r\n            user-select: none;\r\n            font-weight: bold;\r\n        }\r\n        ul.treeview .expanded > ul {\r\n            display: block;\r\n        }\r\n        ul.treeview li {\r\n            margin: 0.2em 0;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <ul class=\"treeview\" id=\"tree\">\r\n    {{ insert_folder(CTX.root) }}\r\n    </ul>\r\n    <script>\r\n        document.querySelectorAll('.treeview .toggle').forEach(function(toggle) {\r\n            toggle.addEventListener('click', function(e) {\r\n                const li = e.target.parentElement;\r\n                li.classList.toggle('expanded');\r\n                e.target.textContent = li.classList.contains('expanded') ? 'â–¼' : 'â–¶';\r\n            });\r\n        });\r\n    </script>\r\n</body>\r\n</html>"}],"to":null,"when":"{{ SUCCEEDED }}"}],"packOverrides":[],"publishResultAs":"","retry":null,"runAsOrgId":"","timeout":600,"transitionMode":"FOLLOW_ALL","with":null,"securitySchema":{"redact":{"input":[],"result":[]}}},{"id":"@@@workflow_task_id_ref3@@@","action":{"id":"@@@action_ref1@@@"},"humanSecondsSaved":0,"input":{},"isMocked":false,"join":1,"mockInput":{"mock_result":{}},"name":"FINISH","next":[{"do":[],"from":null,"id":"@@@transition_id_ref3@@@","publish":[],"to":null,"when":"{{ SUCCEEDED }}"}],"packOverrides":[],"publishResultAs":"","retry":null,"runAsOrgId":"","timeout":600,"transitionMode":"FOLLOW_ALL","with":null,"securitySchema":{"redact":{"input":[],"result":[]}}},{"id":"@@@workflow_task_id_ref4@@@","action":{"id":"@@@action_ref2@@@"},"humanSecondsSaved":0,"input":{"run_as_user":null},"isMocked":false,"join":0,"mockInput":{"mock_result":{}},"name":"LIST_WORKFLOWS","next":[{"do":["@@@workflow_task_id_ref1@@@"],"from":null,"id":"@@@transition_id_ref4@@@","publish":[{"key":"workflows","value":"{{ RESULT.result }}"}],"to":null,"when":"{{ SUCCEEDED }}"}],"packOverrides":[],"publishResultAs":"","retry":null,"runAsOrgId":"","timeout":600,"transitionMode":"FOLLOW_ALL","with":null,"securitySchema":{"redact":{"input":[],"result":[]}}},{"id":"@@@workflow_task_id_ref5@@@","action":{"id":"@@@action_ref1@@@"},"humanSecondsSaved":0,"input":{},"isMocked":false,"join":0,"mockInput":{"mock_result":{}},"name":"START","next":[{"do":["@@@workflow_task_id_ref4@@@"],"from":null,"id":"@@@transition_id_ref5@@@","publish":[],"to":null,"when":"{{ SUCCEEDED }}"}],"packOverrides":[],"publishResultAs":"","retry":null,"runAsOrgId":"","timeout":600,"transitionMode":"FOLLOW_ALL","with":null,"securitySchema":{"redact":{"input":[],"result":[]}}}],"timeout":28800,"type":"STANDARD","varsSchema":{}},"nonfunctional_fields":{"description":"","name":"Folders-Page","tasks[0].description":"Action that does nothing","tasks[0].metadata":{"x":552,"y":480},"tasks[0].next[0].label":"","tasks[1].description":"Action that does nothing","tasks[1].metadata":{"x":552,"y":648},"tasks[1].next[0].label":"","tasks[2].description":"Action that does nothing","tasks[2].metadata":{"x":552,"y":816},"tasks[2].next[0].label":"","tasks[3].description":"","tasks[3].metadata":{"x":552,"y":312},"tasks[3].next[0].label":"","tasks[4].description":"Action that does nothing","tasks[4].metadata":{"x":552,"y":144},"tasks[4].next[0].label":""},"references":{"workflow_task_id_ref3":{"kind":"string","type":"workflow_task_id","src_key_hash":"E49R5z5LXLYTwtwhvUpS3nsKfuRWRLsXV8UThjL8V4Vi","content_hash":"GfdJ1Mxknuwpzrwzu8fD4jwpheDRs8u3gD6RkzuZXwpH","locations":["tasks[2].id","tasks[1].next[0].do[0]"]},"workflow_task_id_ref5":{"kind":"string","type":"workflow_task_id","src_key_hash":"HrFnBF7N8wAhMie2oTpERDTa7cqLogSuAHAB3XZe7beS","content_hash":"8dk7jG1RwRYRvTii2Qvddr8Mf3RpCktfnu2MiAWeZrvF","locations":["tasks[4].id"]},"transition_id_ref4":{"kind":"string","type":"transition_id","src_key_hash":"CU1Jw8VBbgHUC5tZoEk1TxawuYCycp4AM1tramz8jeGQ","content_hash":"12KbA3MxDp2vUY9K6VDdRmiHVa99riayEN8N3S7pCyXN","locations":["tasks[3].next[0].id"]},"action_ref2":{"kind":"string","type":"action","src_key_hash":"7To4L9ezVkoUpG1dBUBMCxwXxCsVnwqjB97gXsJQKuWo","content_hash":"HSEfWa6r3EymMKgxqapS8QUC5BpJHNUqJqWhJoseRQgm","locations":["tasks[3].action.id"]},"workflow_task_id_ref1":{"kind":"string","type":"workflow_task_id","src_key_hash":"8Q8aveL1ximsuUbY4H5oU3HydNs75SSy8RAoafDPTjAH","content_hash":"GNB2g5ht6iUAFy34VLNhFJ92hUy3bAuLvEja4zCaN9f1","locations":["tasks[0].id","tasks[3].next[0].do[0]"]},"workflow_task_id_ref4":{"kind":"string","type":"workflow_task_id","src_key_hash":"FA4gH6Hg6ogeS2EpV2389ip1BpEJ8wz8HtuCzzk7ZRY9","content_hash":"Ezf7xhwbJSW7UKZdUJ4M9agXUvtRx4ksVpEcosbE7zXT","locations":["tasks[3].id","tasks[4].next[0].do[0]"]},"workflow_task_id_ref2":{"kind":"string","type":"workflow_task_id","src_key_hash":"7tYJ5xNSyoMeUdkeC9Tnf5jUhoQ5SKtiPEM2LwTgTSH3","content_hash":"AGtGMsg4mB7HwRhdBwMoWoEWkvYBQgGjSTaTqfnwgnnR","locations":["tasks[1].id","tasks[0].next[0].do[0]"]},"transition_id_ref1":{"kind":"string","type":"transition_id","src_key_hash":"EVfvkNdkzgcfr8uUtd9vUsxmvtr7CBvM2myjZAcnAnTT","content_hash":"2i6uknjwtjyv7iT2utDEcGxHo9aQUQ6MZq753B7mhPba","locations":["tasks[0].next[0].id"]},"transition_id_ref2":{"kind":"string","type":"transition_id","src_key_hash":"6moyvX9DUrDSRaTq36vvEbadMdsVBSfMPkRBjbAcCK5z","content_hash":"CrNrvSSkt3onvvT2QbZqJxgBbRvGAx9W4jgRbhutn4f4","locations":["tasks[1].next[0].id"]},"action_ref1":{"kind":"string","type":"action","src_key_hash":"CBSfhCQSGN4Hj8XDK4gZbiguLRU4VbSAMsL5vvGMFGLr","content_hash":"CdPL6KHuhM7mBvTHi4QnQbxCitnoxuRrq1BfHNnQYzKB","locations":["tasks[0].action.id","tasks[1].action.id","tasks[2].action.id","tasks[4].action.id"]},"transition_id_ref5":{"kind":"string","type":"transition_id","src_key_hash":"4c7x3rx2NNW2LNyjBU85CeAxUtyEAsEeBPn4qexnyxi9","content_hash":"BNZwXKzcGJmCdXwsWBkQR4Z4QCEvSKEYxymjRc6Uzw3L","locations":["tasks[4].next[0].id"]},"transition_id_ref3":{"kind":"string","type":"transition_id","src_key_hash":"2cHmAGJpbkHu8ZPVRSgoQFgodGhRVNgf67G51baCeSEF","content_hash":"E2Bd2rLiwcBkcn335iGtKj2ZhJdU9rC54wjjUSsJxvyK","locations":["tasks[2].next[0].id"]}},"dependencies":["workflow_task_id:8Q8aveL1ximsuUbY4H5oU3HydNs75SSy8RAoafDPTjAH","transition_id:2cHmAGJpbkHu8ZPVRSgoQFgodGhRVNgf67G51baCeSEF","transition_id:6moyvX9DUrDSRaTq36vvEbadMdsVBSfMPkRBjbAcCK5z","transition_id:4c7x3rx2NNW2LNyjBU85CeAxUtyEAsEeBPn4qexnyxi9","transition_id:EVfvkNdkzgcfr8uUtd9vUsxmvtr7CBvM2myjZAcnAnTT","action:7To4L9ezVkoUpG1dBUBMCxwXxCsVnwqjB97gXsJQKuWo","workflow_task_id:FA4gH6Hg6ogeS2EpV2389ip1BpEJ8wz8HtuCzzk7ZRY9","transition_id:CU1Jw8VBbgHUC5tZoEk1TxawuYCycp4AM1tramz8jeGQ","workflow_task_id:7tYJ5xNSyoMeUdkeC9Tnf5jUhoQ5SKtiPEM2LwTgTSH3","workflow_task_id:E49R5z5LXLYTwtwhvUpS3nsKfuRWRLsXV8UThjL8V4Vi","workflow_task_id:HrFnBF7N8wAhMie2oTpERDTa7cqLogSuAHAB3XZe7beS","action:CBSfhCQSGN4Hj8XDK4gZbiguLRU4VbSAMsL5vvGMFGLr"]}},"__typename":"ExportBundle"}